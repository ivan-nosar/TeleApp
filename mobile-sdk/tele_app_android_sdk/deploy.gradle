apply plugin: 'maven-publish'
apply plugin: 'signing'

task androidSourcesJar(type: Jar) {
    classifier 'sources'
    from android.sourceSets.main.java.source
}

artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID // 'com.github.ivan-nosar'
version = PUBLISH_VERSION // '0.1'

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'TeleApp Android SDK'

                url = 'https://dev.azure.com/ivan-nosar/_git/tele-app'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://mit-license.org/'
                    }
                }
                developers {
                    developer {
                        id = '57803'
                        name = 'Ivan Nosar'
                        email = 'wowgm@yandex.ru'
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    connection = 'scm:git:github.com/ivan-nosar/TeleApp.git/'
                    developerConnection = 'scm:git:ssh://github.com/ivan-nosar/TeleApp.git/'
                    url = 'https://github.com/ivan-nosar/TeleApp'
                }

                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}


//apply plugin: 'maven'
//apply plugin: 'signing'
//
//task sourceJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier "sources"
//}
//
//artifacts {
//    archives sourceJar
//}
//
//signing {
//    sign configurations.archives
//}
//
//group = "com.github.ivan-nosar"
//archivesBaseName = "tele-app-android-sdk"
//version = "0.1"
//
//signing.keyId='3FA03B26'
//signing.password=Canary123
//signing.secretKeyRingFile='D:\\GPG keys\\AC6612CF295C0C497D72CC23E3C939843FA03B26.asc'
//
//ossrhUsername=ivan.nosar
//ossrhPassword=Braveheart1-
//
//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: ossrhUsername, password: ossrhPassword)
//            }
//
//            pom.project {
//                name 'Example Application'
//                packaging 'jar'
//                // optionally artifactId can be defined here
//                description 'A application used as an example on how to set up pushing  its components to the Central Repository.'
//                url 'http://www.example.com/example-application'
//
//                scm {
//                    connection 'scm:svn:http://foo.googlecode.com/svn/trunk/'
//                    developerConnection 'scm:svn:https://foo.googlecode.com/svn/trunk/'
//                    url 'http://foo.googlecode.com/svn/trunk/'
//                }
//
//                licenses {
//                    license {
//                        name 'The Apache License, Version 2.0'
//                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//
//                developers {
//                    developer {
//                        id 'manfred'
//                        name 'Manfred Moser'
//                        email 'manfred@sonatype.com'
//                    }
//                }
//            }
//        }
//    }
//}
